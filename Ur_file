<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Battery Management System Dashboard</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        :root {
            --primary-bg: #271B2C;
            --card-bg: #3A2A40;
            --text-color: #F5F5F5;
            --accent-1: #FF6B9D;
            --accent-2: #4ECDC4;
            --accent-3: #FFD166;
            --accent-4: #744577;
            --accent-5: #118AB2;
        }
        
        body {
            background-color: var(--primary-bg);
            color: var(--text-color);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
        }
        
        header {
            text-align: center;
            margin-bottom: 30px;
            padding: 20px;
            background-color: var(--card-bg);
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        h1 {
            margin: 0;
            color: var(--accent-2);
        }
        
        .subtitle {
            color: var(--accent-1);
            margin-top: 5px;
        }
        
        .config-section {
            background-color: var(--card-bg);
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 30px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        .config-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
        }
        
        .config-item {
            padding: 15px;
            background-color: rgba(255, 255, 255, 0.05);
            border-radius: 8px;
            border-left: 4px solid var(--accent-2);
        }
        
        .config-title {
            font-weight: bold;
            margin-bottom: 5px;
            color: var(--accent-2);
        }
        
        .charts-section {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(600px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .chart-container {
            background-color: var(--card-bg);
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        .chart-title {
            margin-top: 0;
            margin-bottom: 15px;
            color: var(--accent-1);
            text-align: center;
        }
        
        .status-bar {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
            background-color: var(--card-bg);
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        .status-item {
            text-align: center;
            flex: 1;
        }
        
        .status-value {
            font-size: 1.5rem;
            font-weight: bold;
            color: var(--accent-2);
        }
        
        .status-label {
            font-size: 0.9rem;
            color: var(--text-color);
            opacity: 0.8;
        }
        
        footer {
            text-align: center;
            margin-top: 30px;
            padding: 15px;
            color: var(--text-color);
            opacity: 0.7;
            font-size: 0.9rem;
        }

        .loading {
            text-align: center;
            padding: 20px;
            color: var(--accent-2);
        }

        /* Ensure canvases use full container width */
        canvas {
            width: 100% !important;
            height: auto !important;
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>Battery Management System Dashboard</h1>
            <p class="subtitle">Real-time monitoring and analysis of battery performance</p>
        </header>
        
        <div class="status-bar" id="statusBar">
            <div class="status-item">
                <div class="status-value" id="currentSOC">--%</div>
                <div class="status-label">Overall SOC</div>
            </div>
            <div class="status-item">
                <div class="status-value" id="currentSOH">--%</div>
                <div class="status-label">Overall SOH</div>
            </div>
            <div class="status-item">
                <div class="status-value" id="currentTemp">--°C</div>
                <div class="status-label">Pack Temperature</div>
            </div>
            <div class="status-item">
                <div class="status-value" id="currentRange">-- km</div>
                <div class="status-label">Estimated Range</div>
            </div>
        </div>
        
        <section class="config-section">
            <h2>Configuration Information</h2>
            <div class="config-grid" id="configGrid">
                <div class="loading">Loading configuration data...</div>
            </div>
        </section>
        
        <section class="charts-section">
            <div class="chart-container"><h3 class="chart-title">Pack State of Charge</h3><canvas id="socChart"></canvas></div>
            <div class="chart-container"><h3 class="chart-title">Pack State of Health</h3><canvas id="sohChart"></canvas></div>
            <div class="chart-container"><h3 class="chart-title">Cell State of Charge</h3><canvas id="cellSocChart"></canvas></div>
            <div class="chart-container"><h3 class="chart-title">Cell State of Health</h3><canvas id="cellSohChart"></canvas></div>
            <div class="chart-container"><h3 class="chart-title">Pack Temperature</h3><canvas id="tempChart"></canvas></div>
            <div class="chart-container"><h3 class="chart-title">Pack Range</h3><canvas id="rangeChart"></canvas></div>
            <div class="chart-container"><h3 class="chart-title">Acceleration Behavior</h3><canvas id="accelChart"></canvas></div>
        </section>
        
        <footer>
            <p>BMS Dashboard | Last Updated: <span id="lastUpdate">Loading...</span></p>
        </footer>
    </div>

    <script>
        // Fix blurry charts by increasing rendering resolution
        Chart.defaults.responsive = true;
        Chart.defaults.maintainAspectRatio = false;
        Chart.defaults.devicePixelRatio = window.devicePixelRatio || 1;

        let charts = {};
        let bmsData = null;

        async function loadBMSData() {
            try {
                const response = await fetch('data/processed_data.json');
                bmsData = await response.json();
                document.getElementById('lastUpdate').textContent = new Date().toLocaleString();
                updateStatusBar();
                populateConfiguration();
                initializeCharts();
            } catch (error) {
                console.error('Error loading BMS data:', error);
                document.getElementById('lastUpdate').textContent = 'Error loading data';
                loadSampleData();
            }
        }

        function updateStatusBar() {
            if (!bmsData?.time_series) return;
            const ts = bmsData.time_series;
            const i = ts.timestamps.length - 1;
            if (i < 0) return;
            document.getElementById('currentSOC').textContent = ts.packSOC[i].toFixed(1) + '%';
            document.getElementById('currentSOH').textContent = ts.packSOH[i].toFixed(1) + '%';
            document.getElementById('currentTemp').textContent = ts.packTemp[i].toFixed(1) + '°C';
            document.getElementById('currentRange').textContent = ts.packRange[i].toFixed(0) + ' km';
        }

        function populateConfiguration() {
            if (!bmsData?.config) return;
            const cfg = bmsData.config, grid = document.getElementById('configGrid');
            const items = [
                { l: 'Battery Capacity', v: `${cfg.batteryCapacity} Ah` },
                { l: 'Number of Cells', v: cfg.numCells },
                { l: 'Max Discharge Current', v: `${cfg.maxDischargeCurrent} A` },
                { l: 'Max Charge Current', v: `${cfg.maxChargeCurrent} A` }
            ];
            grid.innerHTML = '';
            items.forEach(i => {
                grid.innerHTML += `<div class="config-item"><div class="config-title">${i.l}</div><div>${i.v}</div></div>`;
            });
        }

        function formatTimeLabel(t) {
            const m = Math.floor(t / 60), s = Math.floor(t % 60);
            return `${m}:${s.toString().padStart(2,'0')}`;
        }

        function initializeCharts() {
            if (!bmsData?.time_series) return;
            const ts = bmsData.time_series;
            const labels = ts.timestamps.map(formatTimeLabel);

            // destroy existing
            Object.values(charts).forEach(c => c?.destroy());

            const chartOptions = (yLabel, color) => ({
                responsive: true,
                maintainAspectRatio: false,
                plugins: { legend: { labels: { color: '#F5F5F5' } } },
                scales: {
                    x: { ticks: { color: '#F5F5F5' }, grid: { color: 'rgba(255,255,255,0.1)' }, title: { display: true, text: 'Time (min:sec)', color: '#F5F5F5' } },
                    y: { ticks: { color: '#F5F5F5' }, grid: { color: 'rgba(255,255,255,0.1)' }, title: { display: true, text: yLabel, color: '#F5F5F5' } }
                }
            });

            charts.soc = new Chart(document.getElementById('socChart'), {
                type: 'line',
                data: { labels, datasets: [{ label: 'Pack SOC (%)', data: ts.packSOC, borderColor: '#4ECDC4', backgroundColor: 'rgba(78,205,196,0.1)', borderWidth: 2, fill: true, tension: 0.4 }] },
                options: chartOptions('SOC (%)')
            });

            charts.soh = new Chart(document.getElementById('sohChart'), {
                type: 'line',
                data: { labels, datasets: [{ label: 'Pack SOH (%)', data: ts.packSOH, borderColor: '#FF6B9D', backgroundColor: 'rgba(255,107,157,0.1)', borderWidth: 2, fill: true, tension: 0.4 }] },
                options: chartOptions('SOH (%)')
            });

            charts.temp = new Chart(document.getElementById('tempChart'), {
                type: 'line',
                data: { labels, datasets: [{ label: 'Temperature (°C)', data: ts.packTemp, borderColor: '#FFD166', backgroundColor: 'rgba(255,209,102,0.1)', borderWidth: 2, fill: true, tension: 0.4 }] },
                options: chartOptions('Temperature (°C)')
            });

            charts.range = new Chart(document.getElementById('rangeChart'), {
                type: 'line',
                data: { labels, datasets: [{ label: 'Range (km)', data: ts.packRange, borderColor: '#118AB2', backgroundColor: 'rgba(17,138,178,0.1)', borderWidth: 2, fill: true, tension: 0.4 }] },
                options: chartOptions('Range (km)')
            });

            charts.accel = new Chart(document.getElementById('accelChart'), {
                type: 'line',
                data: { labels, datasets: [{ label: 'Acceleration (%)', data: ts.acceleration, borderColor: '#6A0572', backgroundColor: 'rgba(106,5,114,0.1)', borderWidth: 2, fill: true, tension: 0.4 }] },
                options: chartOptions('Acceleration (%)')
            });
        }

        function loadSampleData() {
            console.log('Sample data fallback');
        }

        document.addEventListener('DOMContentLoaded', loadBMSData);
    </script>
</body>
</html>
